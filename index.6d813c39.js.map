{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,S,WAGA,MAAMC,EAAS,IAAI,EAAAF,EAAAG,SAEbC,EAAO,CACXC,KAAMC,SAASC,cAAc,qBAC7BC,OAAQF,SAASC,cAAc,gBAC/BE,QAASH,SAASC,cAAc,kBAChCG,WAAYJ,SAASC,cAAc,8BAGrCH,EAAKI,OAAOG,iBAAiB,UAI7B,SAAyBC,GACvBA,EAAEC,iBACFX,EAAOY,YACPJ,WAAWK,WAAWb,EAAOc,MAC7BZ,EAAKM,WAAWC,iBAAiB,QAASM,GA0F5C,WACE,MAAMC,EAAUZ,SAASC,cAAc,0BACnCW,GAAWA,EAAQC,UAAUC,SAAS,WACxCF,EAAQC,UAAUE,OAAO,UA5F3BC,GACApB,EAAOqB,QAAUX,EAAEY,OAAOC,SAASC,OAAOC,MAAMC,OAEhDC,OAGF,SAASA,IACP3B,EAAO4B,qBAdK,MAcyBC,MAAKC,IACxC,GAAkC,IAA9BA,EAAWC,QAAQC,OAAvB,CAIAxB,WAAWyB,cAAcH,EAAWI,eACpClC,EAAOmC,QAAUL,EAAWM,YAC5B,IACE,MAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,WAuInBC,EAtIHZ,EAAWC,QAuI5CS,aAAaG,QAAQ,aAAcL,KAAKM,UAAUF,IApHrBG,EAlBHf,EAAWC,QAkBAe,EAlBST,EAmB9CnC,EAAKC,KAAK4C,UAAYF,EACnBG,KAAIC,IACH,IAAIC,EAwCV,SAAkBC,EAAUL,GAC1B,OAAOK,EAASH,KAAII,GACXN,EAAOO,MAAKC,GAASA,EAAMF,KAAOA,IAAIG,OA1C7BC,CAASP,EAAMQ,UAAWX,GAExC,MAAO,oCAAoCG,EAAMG,gEAwGjCM,EArGZT,EAAMU,YAsGVD,EACK,uCAAuCA,IAEzC,sJAtG8BT,EAAMW,mDAc7C,SAAwBd,GACtB,OAAsB,IAAlBA,EAAOd,OACF,UACEc,EAAOd,OAAS,EAClB,GAAGc,EAAO,OAAOA,EAAO,YAExB,GAAG,IAAIA,GAAQe,KAAK,QAnBOC,CACxBZ,+EAsBYa,EAnBRd,EAAMe,aAoBlBD,EACKA,EAAKE,MAAM,EAAG,GAEd,wDAJX,IAA0BF,EA0EJL,KAvFjBG,KAAK,IAvCJ,MAAOK,GACPC,QAAQC,IAAIF,EAAMX,MAClBY,QAAQC,IAAIF,EAAMG,SAexB,IAA+BxB,EAAQC,EAmHDJ,OAjEpBtC,SAASC,cAAc,0BAC/BY,UAAUqD,IAAI,aAUxB,SAASvD,EAAewD,GAClBA,EAAMjD,SAAWpB,EAAKM,aAGtB+D,EAAMjD,OAAOL,UAAUC,SAAS,mBAClClB,EAAOY,YACPe,KAEE4C,EAAMjD,OAAOL,UAAUC,SAAS,kBAClClB,EAAOwE,WACP7C,MAGA4C,EAAMjD,OAAOL,UAAUC,SAAS,iBAC/BqD,EAAMjD,OAAOL,UAAUC,SAAS,sBAChCqD,EAAMjD,OAAOL,UAAUC,SAAS,uBAEjClB,EAAOyE,UAAUC,OAAOH,EAAMjD,OAAOqD,cACrChD,KAEE4C,EAAMjD,OAAOL,UAAUC,SAAS,kBAClClB,EAAO4E,WACPjD,KAEE4C,EAAMjD,OAAOL,UAAUC,SAAS,kBAClClB,EAAO6E,UACPlD,KAEE4C,EAAMjD,OAAOL,UAAUC,SAAS,uBAClClB,EAAO8E,WACPnD,KAEE4C,EAAMjD,OAAOL,UAAUC,SAAS,uBAClClB,EAAO+E,UACPpD,KAGE4C,EAAMjD,OAAOL,UAAUC,SAAS,mBAC9BqD,EAAMjD,OAAO0D,cAAc/D,UAAUC,SAAS,uBAChDlB,EAAO8E,WACPnD,KAEE4C,EAAMjD,OAAO0D,cAAc/D,UAAUC,SAAS,uBAChDlB,EAAO+E,UACPpD,Q","sources":["src/js/movie-list-by-keyword.js"],"sourcesContent":["import TopMovies from './work-with-api';\nimport { createPagination } from './pagination';\n\nconst movies = new TopMovies();\n\nconst refs = {\n  list: document.querySelector('.movie-collection'),\n  formEl: document.querySelector('#search-form'),\n  inputEl: document.querySelector('.search__input'),\n  pagination: document.querySelector('#tui-pagination-container'),\n};\n\nrefs.formEl.addEventListener('submit', moviesByKeyword);\n\nlet keyword = null;\n\nfunction moviesByKeyword(e) {\n  e.preventDefault();\n  movies.resetPage();\n  pagination.movePageTo(movies.page);\n  refs.pagination.addEventListener('click', changePageName);\n  removeErrorMessage();\n  movies.keyword = e.target.elements.search.value.trim();\n\n  fetchMoviesByKeyword();\n}\n\nfunction fetchMoviesByKeyword() {\n  movies.searchMovieByKeyword(keyword).then(moviesList => {\n    if (moviesList.results.length === 0) {\n      showErrorMessage();\n      return;\n    }\n    pagination.setTotalItems(moviesList.total_results);\n    movies.endPage = moviesList.total_pages;\n    try {\n      const genresList = JSON.parse(localStorage.getItem('genres'));\n      savePageMoviesInLocalStorage(moviesList.results);\n      moviesByKeywordMarkUp(moviesList.results, genresList);\n    } catch (error) {\n      console.log(error.name);\n      console.log(error.message);\n    }\n  });\n}\n\nfunction getGenrs(genresID, genres) {\n  return genresID.map(id => {\n    if (genres.find(genre => genre.id === id)) {\n      return genres.find(genre => genre.id === id).name;\n    } else {\n      return 'Self made';\n    }\n  });\n}\n\nfunction moviesByKeywordMarkUp(movies, genres) {\n  refs.list.innerHTML = movies\n    .map(movie => {\n      let movie_g = getGenrs(movie.genre_ids, genres);\n\n      return `<li class=\"movies__item\" data-id=${movie.id}>\n    <a href=\"\" class=\"movies__link\">\n        <img src='${checkImgLink(\n          movie.poster_path\n        )}' class=\"movie__image\" alt=\"Movie\">\n        <div class=\"movie__text-part\">\n            <h2 class=\"movie__title\">${movie.title}</h2>\n            <p class=\"movie__genre\">${checkGenreList(\n              movie_g\n            )} <span class=\"stick\">|</span> \n                <span class=\"movie__year\">${checkReleaseDate(\n                  movie.release_date\n                )}</span></p>\n        </div>\n    </a>\n</li>`;\n    })\n    .join('');\n}\n\nfunction checkGenreList(genres) {\n  if (genres.length === 0) {\n    return 'No data';\n  } else if (genres.length > 2) {\n    return `${genres[0]}, ${genres[1]}, Other`;\n  } else {\n    return `${[...genres].join(', ')}`;\n  }\n}\n\nfunction checkReleaseDate(date) {\n  if (date) {\n    return date.slice(0, 4);\n  } else {\n    return 'No data';\n  }\n}\n\nfunction getGenrs(genresID, genres) {\n  return genresID.map(id => {\n    return genres.find(genre => genre.id === id).name;\n  });\n}\n\nfunction showErrorMessage() {\n  const errorEl = document.querySelector('.search__error-message');\n  errorEl.classList.add('active');\n}\n\nfunction removeErrorMessage() {\n  const errorEl = document.querySelector('.search__error-message');\n  if (errorEl && errorEl.classList.contains('active')) {\n    errorEl.classList.remove('active');\n  }\n}\n\nfunction changePageName(event) {\n  if (event.target === refs.pagination) {\n    return;\n  }\n  if (event.target.classList.contains('tui-ico-first')) {\n    movies.resetPage();\n    fetchMoviesByKeyword();\n  }\n  if (event.target.classList.contains('tui-ico-last')) {\n    movies.lastPage();\n    fetchMoviesByKeyword();\n  }\n  if (\n    event.target.classList.contains('tui-page-btn') &&\n    !event.target.classList.contains('tui-next-is-ellip') &&\n    !event.target.classList.contains('tui-prev-is-ellip')\n  ) {\n    movies.cengePage(Number(event.target.textContent));\n    fetchMoviesByKeyword();\n  }\n  if (event.target.classList.contains('tui-ico-next')) {\n    movies.nextPage();\n    fetchMoviesByKeyword();\n  }\n  if (event.target.classList.contains('tui-ico-prev')) {\n    movies.prePage();\n    fetchMoviesByKeyword();\n  }\n  if (event.target.classList.contains('tui-next-is-ellip')) {\n    movies.nextElip();\n    fetchMoviesByKeyword();\n  }\n  if (event.target.classList.contains('tui-prev-is-ellip')) {\n    movies.preElip();\n    fetchMoviesByKeyword();\n  }\n\n  if (event.target.classList.contains('tui-ico-ellip')) {\n    if (event.target.parentElement.classList.contains('tui-next-is-ellip')) {\n      movies.nextElip();\n      fetchMoviesByKeyword();\n    }\n    if (event.target.parentElement.classList.contains('tui-prev-is-ellip')) {\n      movies.preElip();\n      fetchMoviesByKeyword();\n    }\n  }\n}\nfunction checkImgLink(data) {\n  if (data) {\n    return `https://image.tmdb.org/t/p/original/${data}`;\n  }\n  return `https://bflix.biz/no-poster.png`;\n}\nfunction savePageMoviesInLocalStorage(pageMovies) {\n  localStorage.setItem('pageMovies', JSON.stringify(pageMovies));\n}\n"],"names":["$aRcm3","parcelRequire","$8ef68ecdc822f9b3$var$movies","default","$8ef68ecdc822f9b3$var$refs","list","document","querySelector","formEl","inputEl","pagination","addEventListener","e","preventDefault","resetPage","movePageTo","page","$8ef68ecdc822f9b3$var$changePageName","errorEl","classList","contains","remove","$8ef68ecdc822f9b3$var$removeErrorMessage","keyword","target","elements","search","value","trim","$8ef68ecdc822f9b3$var$fetchMoviesByKeyword","searchMovieByKeyword","then","moviesList","results","length","setTotalItems","total_results","endPage","total_pages","genresList","JSON","parse","localStorage","getItem","pageMovies","setItem","stringify","movies1","genres","innerHTML","map","movie","movie_g","genresID","id","find","genre","name","$8ef68ecdc822f9b3$var$getGenrs","genre_ids","data","poster_path","title","join","$8ef68ecdc822f9b3$var$checkGenreList","date","release_date","slice","error","console","log","message","add","event","lastPage","cengePage","Number","textContent","nextPage","prePage","nextElip","preElip","parentElement"],"version":3,"file":"index.6d813c39.js.map"}